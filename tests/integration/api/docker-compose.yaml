version: '3.9'

services:
  generator:
    build: ../../../generator
    env_file:
      - test.env
    depends_on:
      - rabbitmq
    networks:
      - rabbitmq_net
      - mongo_net
      - users_net

  notification_handler:
    build: ../../../notification_handler
    env_file:
      - ../../../env_files/notification_handler.env.example
    depends_on:
      - rabbitmq
    networks:
       - rabbitmq_net
       - notifications_net

  app:
    build: ../../../notification_api
    ports:
      - "8000:8000"
    env_file:
      - ../../../env_files/api.env.example
    healthcheck:
      test: curl --fail http://app:8000/api/health/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 20
    depends_on:
      - rabbitmq
    networks:
      - rabbitmq_net

  worker:
    build: ../../../worker
    env_file:
      - ../../../env_files/worker.env.example
    networks:
      - rabbitmq_net
      - templates_net

  mongo1:
    image: mongo
    command: mongod --dbpath /data/db --port 27017
    ports:
      - "27017:27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - mongo_net

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    expose:
      - "5672"
      - "15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=pass
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq_net

  templates_db:
    image: postgres:15.0-alpine
    volumes:
      - ../../../templates_db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    env_file:
      - ../../../env_files/templates_db.env.example
    environment:
      - POSTGRES_HOST=templates_db
      - POSTGRES_PORT=5432
    expose:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $$POSTGRES_DB -h $$POSTGRES_HOST -p $$POSTGRES_PORT -U $$POSTGRES_USER"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - templates_net

  notifications_db:
    image: postgres:15.0-alpine
    volumes:
      - ../../../notifications_db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    env_file:
      - ../../../env_files/notifications_db.env.example
    environment:
      - POSTGRES_HOST=notifications_db
      - POSTGRES_PORT=5432
    expose:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $$POSTGRES_DB -h $$POSTGRES_HOST -p $$POSTGRES_PORT -U $$POSTGRES_USER"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notifications_net

  history_db:
    image: postgres:15.0-alpine
    volumes:
      - ../../../history_db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    env_file:
      - ../../../env_files/history_db.env.example
    environment:
      - POSTGRES_HOST=history_db
      - POSTGRES_PORT=5432
    expose:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $$POSTGRES_DB -h $$POSTGRES_HOST -p $$POSTGRES_PORT -U $$POSTGRES_USER"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - history_net

  grpc:
    build: ./grpc_test_server/
    ports:
      - "5001:5001"
    networks:
      - users_net

  tests:
    build: .
    depends_on:
      - app
      - rabbitmq
      - generator
      - notification_handler
      - notifications_db
      - templates_db
      - worker
      - grpc
    env_file:
      - test.env
    entrypoint: >
      sh -c "python3 rabbit_add_queue.py &&
              python3 -m pytest -v"
    networks:
      - mongo_net
      - rabbitmq_net
      - notifications_net

networks:
  mongo_net:
  rabbitmq_net:
  templates_net:
  users_net:
  notifications_net:
  history_net:
