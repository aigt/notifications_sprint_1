name: CI

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  flake:
    name: Flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.8

      - name: Create directories
        run: |
          mkdir -p reports/flake8/
      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wemake-python-styleguide==0.17.0 flake8-quotes==3.3.1 flake8-html
      - name: Setup flake8 annotations
        uses: rbialon/flake8-annotations@v1.1

      - name: Flake8 check UGC API
        run: flake8 --format=html --htmldir=reports/flake8/ --config=.flake8

      - name: Upload reports
        uses: actions/upload-artifact@v3
        with:
          name: reports
          path: reports/

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
        with:
          options: "--check --verbose"
          jupyter: true

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    env:
      HADOLINT_RECURSIVE: "true"
    steps:
      - uses: actions/checkout@v3

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.0.0
        with:
          recursive: true

  mypy:
    name: Mypy type checking
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.8

      - name: pip upgrade
        run: |
          python -m pip install --upgrade pip
      - name: Installing mypy
        run: |
          python -m pip install mypy lxml
      - name: Add mypy annotator
        uses: pr-annotators/mypy-pr-annotator@v1.0.0

      - name: mypy with python-version ${{ matrix.python-version }}
        run: mypy --config=pyproject.toml --html-report ./reports/mypy/${{ matrix.python-version }} --python-version ${{ matrix.python-version }}

      - name: Upload reports
        uses: actions/upload-artifact@v3
        with:
          name: reports
          path: reports/

  tests:
    name: Mypy type checking
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service_name: "worker"
            path: "tests/integration/worker"
            app_path: "worker"
            history_db_env: ${{ secrets.HISTORY_DB_ENV_FILE }}
            templates_db_env: ${{ secrets.TEMPLATES_DB_ENV_FILE }}
            worker_env: ${{ secrets.WORKER_ENV_FILE }}
          - service_name: "api"
            path: "tests/integration/api"
            app_path: "notification_api"
    steps:
      - uses: actions/checkout@v3

      - shell: pwsh
        # Give an id to the step, so we can reference it later
        id: check_file_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          $SourceDiff = $diff | Where-Object { $_ -match '^${{ matrix.path }}/' -or $_ -match '^${{ matrix.app_path }}/' }
          $HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "files_changed"
          Write-Host "::set-output name=docs_changed::$HasDiff"

      - shell: pwsh
        # steps.<step_id>.outputs.<output name>
        # if: steps.check_file_changed.outputs.files_changed == 'True'
        run: echo "The files under tests are changed - ${{ steps.check_file_changed.outputs.files_changed }}"

      - name: "Create history_db.env file"
        if: ${{ matrix.history_db_env }}
        run: |
          echo "${{ matrix.history_db_env }}" > ${{ matrix.path }}/env_files/history_db.env

      - name: "Create templates_db.env file"
        if: ${{ matrix.templates_db_env }}
        run: |
          echo "${{ matrix.templates_db_env }}" > ${{ matrix.path }}/env_files/templates_db.env

      - name: "Create worker.env file"
        if: ${{ matrix.worker_env }}
        run: |
          echo "${{ matrix.worker_env }}" > ${{ matrix.path }}/env_files/worker.env

      - name: Run tests
        working-directory: ${{ matrix.path }}
        run: |
          cd tests/integration
          docker-compose up --build --abort-on-container-exit --exit-code-from tests

  telegram_message:
    name: Send message to telegram
    runs-on: ubuntu-latest
    needs: [flake, black, hadolint, mypy, tests]
    steps:
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} открыл новый pull request:
            ${{ github.event.pull_request.title }}

            Призываю проверить:
            https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}

            Так же можно проверить остальные ПР:
            https://github.com/${{ github.repository }}/pulls
